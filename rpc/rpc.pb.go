// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.14.0
// source: pkg/rpc/rpc.proto

//import "google/protobuf/struct.proto";

package rpc

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type MessageLevel int32

const (
	MessageLevel_UNDEFINED MessageLevel = 0
	MessageLevel_INFO      MessageLevel = 1
	MessageLevel_NOTE      MessageLevel = 2
	MessageLevel_WARN      MessageLevel = 3
	MessageLevel_DEBUG     MessageLevel = 4
	MessageLevel_SUCCESS   MessageLevel = 5
	MessageLevel_PLAIN     MessageLevel = 6
)

// Enum value maps for MessageLevel.
var (
	MessageLevel_name = map[int32]string{
		0: "UNDEFINED",
		1: "INFO",
		2: "NOTE",
		3: "WARN",
		4: "DEBUG",
		5: "SUCCESS",
		6: "PLAIN",
	}
	MessageLevel_value = map[string]int32{
		"UNDEFINED": 0,
		"INFO":      1,
		"NOTE":      2,
		"WARN":      3,
		"DEBUG":     4,
		"SUCCESS":   5,
		"PLAIN":     6,
	}
)

func (x MessageLevel) Enum() *MessageLevel {
	p := new(MessageLevel)
	*p = x
	return p
}

func (x MessageLevel) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MessageLevel) Descriptor() protoreflect.EnumDescriptor {
	return file_pkg_rpc_rpc_proto_enumTypes[0].Descriptor()
}

func (MessageLevel) Type() protoreflect.EnumType {
	return &file_pkg_rpc_rpc_proto_enumTypes[0]
}

func (x MessageLevel) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MessageLevel.Descriptor instead.
func (MessageLevel) EnumDescriptor() ([]byte, []int) {
	return file_pkg_rpc_rpc_proto_rawDescGZIP(), []int{0}
}

type ID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *ID) Reset() {
	*x = ID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_rpc_rpc_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ID) ProtoMessage() {}

func (x *ID) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_rpc_rpc_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ID.ProtoReflect.Descriptor instead.
func (*ID) Descriptor() ([]byte, []int) {
	return file_pkg_rpc_rpc_proto_rawDescGZIP(), []int{0}
}

func (x *ID) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type AgentInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID             string   `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Alive          bool     `protobuf:"varint,2,opt,name=Alive,proto3" json:"Alive,omitempty"`
	Authenticated  bool     `protobuf:"varint,3,opt,name=Authenticated,proto3" json:"Authenticated,omitempty"`
	Build          *Build   `protobuf:"bytes,4,opt,name=Build,proto3" json:"Build,omitempty"`
	Host           *Host    `protobuf:"bytes,5,opt,name=Host,proto3" json:"Host,omitempty"`
	Process        *Process `protobuf:"bytes,6,opt,name=Process,proto3" json:"Process,omitempty"`
	Comms          *Comms   `protobuf:"bytes,7,opt,name=Comms,proto3" json:"Comms,omitempty"`
	InitialCheckin string   `protobuf:"bytes,8,opt,name=InitialCheckin,proto3" json:"InitialCheckin,omitempty"`
	LastCheckin    string   `protobuf:"bytes,9,opt,name=LastCheckin,proto3" json:"LastCheckin,omitempty"`
	Links          []string `protobuf:"bytes,10,rep,name=Links,proto3" json:"Links,omitempty"`
	Listener       string   `protobuf:"bytes,11,opt,name=Listener,proto3" json:"Listener,omitempty"`
	Note           string   `protobuf:"bytes,12,opt,name=Note,proto3" json:"Note,omitempty"`
	Status         string   `protobuf:"bytes,13,opt,name=Status,proto3" json:"Status,omitempty"`
	Groups         []string `protobuf:"bytes,14,rep,name=Groups,proto3" json:"Groups,omitempty"`
}

func (x *AgentInfo) Reset() {
	*x = AgentInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_rpc_rpc_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AgentInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AgentInfo) ProtoMessage() {}

func (x *AgentInfo) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_rpc_rpc_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AgentInfo.ProtoReflect.Descriptor instead.
func (*AgentInfo) Descriptor() ([]byte, []int) {
	return file_pkg_rpc_rpc_proto_rawDescGZIP(), []int{1}
}

func (x *AgentInfo) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *AgentInfo) GetAlive() bool {
	if x != nil {
		return x.Alive
	}
	return false
}

func (x *AgentInfo) GetAuthenticated() bool {
	if x != nil {
		return x.Authenticated
	}
	return false
}

func (x *AgentInfo) GetBuild() *Build {
	if x != nil {
		return x.Build
	}
	return nil
}

func (x *AgentInfo) GetHost() *Host {
	if x != nil {
		return x.Host
	}
	return nil
}

func (x *AgentInfo) GetProcess() *Process {
	if x != nil {
		return x.Process
	}
	return nil
}

func (x *AgentInfo) GetComms() *Comms {
	if x != nil {
		return x.Comms
	}
	return nil
}

func (x *AgentInfo) GetInitialCheckin() string {
	if x != nil {
		return x.InitialCheckin
	}
	return ""
}

func (x *AgentInfo) GetLastCheckin() string {
	if x != nil {
		return x.LastCheckin
	}
	return ""
}

func (x *AgentInfo) GetLinks() []string {
	if x != nil {
		return x.Links
	}
	return nil
}

func (x *AgentInfo) GetListener() string {
	if x != nil {
		return x.Listener
	}
	return ""
}

func (x *AgentInfo) GetNote() string {
	if x != nil {
		return x.Note
	}
	return ""
}

func (x *AgentInfo) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *AgentInfo) GetGroups() []string {
	if x != nil {
		return x.Groups
	}
	return nil
}

type Build struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Build   string `protobuf:"bytes,1,opt,name=Build,proto3" json:"Build,omitempty"`
	Version string `protobuf:"bytes,2,opt,name=Version,proto3" json:"Version,omitempty"`
}

func (x *Build) Reset() {
	*x = Build{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_rpc_rpc_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Build) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Build) ProtoMessage() {}

func (x *Build) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_rpc_rpc_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Build.ProtoReflect.Descriptor instead.
func (*Build) Descriptor() ([]byte, []int) {
	return file_pkg_rpc_rpc_proto_rawDescGZIP(), []int{2}
}

func (x *Build) GetBuild() string {
	if x != nil {
		return x.Build
	}
	return ""
}

func (x *Build) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

type Comms struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Failed   int32  `protobuf:"varint,1,opt,name=Failed,proto3" json:"Failed,omitempty"`
	JA3      string `protobuf:"bytes,2,opt,name=JA3,proto3" json:"JA3,omitempty"`
	KillDate int64  `protobuf:"varint,3,opt,name=KillDate,proto3" json:"KillDate,omitempty"`
	Padding  int32  `protobuf:"varint,4,opt,name=Padding,proto3" json:"Padding,omitempty"`
	Protocol string `protobuf:"bytes,5,opt,name=Protocol,proto3" json:"Protocol,omitempty"`
	Retry    int32  `protobuf:"varint,6,opt,name=Retry,proto3" json:"Retry,omitempty"`
	Skew     int64  `protobuf:"varint,7,opt,name=Skew,proto3" json:"Skew,omitempty"`
	Wait     string `protobuf:"bytes,8,opt,name=Wait,proto3" json:"Wait,omitempty"`
}

func (x *Comms) Reset() {
	*x = Comms{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_rpc_rpc_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Comms) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Comms) ProtoMessage() {}

func (x *Comms) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_rpc_rpc_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Comms.ProtoReflect.Descriptor instead.
func (*Comms) Descriptor() ([]byte, []int) {
	return file_pkg_rpc_rpc_proto_rawDescGZIP(), []int{3}
}

func (x *Comms) GetFailed() int32 {
	if x != nil {
		return x.Failed
	}
	return 0
}

func (x *Comms) GetJA3() string {
	if x != nil {
		return x.JA3
	}
	return ""
}

func (x *Comms) GetKillDate() int64 {
	if x != nil {
		return x.KillDate
	}
	return 0
}

func (x *Comms) GetPadding() int32 {
	if x != nil {
		return x.Padding
	}
	return 0
}

func (x *Comms) GetProtocol() string {
	if x != nil {
		return x.Protocol
	}
	return ""
}

func (x *Comms) GetRetry() int32 {
	if x != nil {
		return x.Retry
	}
	return 0
}

func (x *Comms) GetSkew() int64 {
	if x != nil {
		return x.Skew
	}
	return 0
}

func (x *Comms) GetWait() string {
	if x != nil {
		return x.Wait
	}
	return ""
}

type Host struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Architecture string   `protobuf:"bytes,1,opt,name=Architecture,proto3" json:"Architecture,omitempty"`
	Name         string   `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	Platform     string   `protobuf:"bytes,3,opt,name=Platform,proto3" json:"Platform,omitempty"`
	IPs          []string `protobuf:"bytes,4,rep,name=IPs,proto3" json:"IPs,omitempty"`
}

func (x *Host) Reset() {
	*x = Host{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_rpc_rpc_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Host) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Host) ProtoMessage() {}

func (x *Host) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_rpc_rpc_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Host.ProtoReflect.Descriptor instead.
func (*Host) Descriptor() ([]byte, []int) {
	return file_pkg_rpc_rpc_proto_rawDescGZIP(), []int{4}
}

func (x *Host) GetArchitecture() string {
	if x != nil {
		return x.Architecture
	}
	return ""
}

func (x *Host) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Host) GetPlatform() string {
	if x != nil {
		return x.Platform
	}
	return ""
}

func (x *Host) GetIPs() []string {
	if x != nil {
		return x.IPs
	}
	return nil
}

type Process struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID             int32  `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	IntegrityLevel int32  `protobuf:"varint,2,opt,name=IntegrityLevel,proto3" json:"IntegrityLevel,omitempty"`
	Name           string `protobuf:"bytes,3,opt,name=Name,proto3" json:"Name,omitempty"`
	UserGUID       string `protobuf:"bytes,4,opt,name=UserGUID,proto3" json:"UserGUID,omitempty"`
	Username       string `protobuf:"bytes,5,opt,name=Username,proto3" json:"Username,omitempty"`
	Domain         string `protobuf:"bytes,6,opt,name=Domain,proto3" json:"Domain,omitempty"`
}

func (x *Process) Reset() {
	*x = Process{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_rpc_rpc_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Process) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Process) ProtoMessage() {}

func (x *Process) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_rpc_rpc_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Process.ProtoReflect.Descriptor instead.
func (*Process) Descriptor() ([]byte, []int) {
	return file_pkg_rpc_rpc_proto_rawDescGZIP(), []int{5}
}

func (x *Process) GetID() int32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *Process) GetIntegrityLevel() int32 {
	if x != nil {
		return x.IntegrityLevel
	}
	return 0
}

func (x *Process) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Process) GetUserGUID() string {
	if x != nil {
		return x.UserGUID
	}
	return ""
}

func (x *Process) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *Process) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

type AgentCMD struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID        string   `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Arguments []string `protobuf:"bytes,2,rep,name=arguments,proto3" json:"arguments,omitempty"`
}

func (x *AgentCMD) Reset() {
	*x = AgentCMD{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_rpc_rpc_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AgentCMD) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AgentCMD) ProtoMessage() {}

func (x *AgentCMD) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_rpc_rpc_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AgentCMD.ProtoReflect.Descriptor instead.
func (*AgentCMD) Descriptor() ([]byte, []int) {
	return file_pkg_rpc_rpc_proto_rawDescGZIP(), []int{6}
}

func (x *AgentCMD) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *AgentCMD) GetArguments() []string {
	if x != nil {
		return x.Arguments
	}
	return nil
}

type Job struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID        string `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	AgentID   string `protobuf:"bytes,2,opt,name=AgentID,proto3" json:"AgentID,omitempty"`
	Command   string `protobuf:"bytes,3,opt,name=Command,proto3" json:"Command,omitempty"`
	Created   string `protobuf:"bytes,4,opt,name=Created,proto3" json:"Created,omitempty"`
	Completed string `protobuf:"bytes,5,opt,name=Completed,proto3" json:"Completed,omitempty"`
	Status    string `protobuf:"bytes,6,opt,name=Status,proto3" json:"Status,omitempty"`
	Sent      string `protobuf:"bytes,7,opt,name=Sent,proto3" json:"Sent,omitempty"`
}

func (x *Job) Reset() {
	*x = Job{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_rpc_rpc_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Job) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Job) ProtoMessage() {}

func (x *Job) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_rpc_rpc_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Job.ProtoReflect.Descriptor instead.
func (*Job) Descriptor() ([]byte, []int) {
	return file_pkg_rpc_rpc_proto_rawDescGZIP(), []int{7}
}

func (x *Job) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *Job) GetAgentID() string {
	if x != nil {
		return x.AgentID
	}
	return ""
}

func (x *Job) GetCommand() string {
	if x != nil {
		return x.Command
	}
	return ""
}

func (x *Job) GetCreated() string {
	if x != nil {
		return x.Created
	}
	return ""
}

func (x *Job) GetCompleted() string {
	if x != nil {
		return x.Completed
	}
	return ""
}

func (x *Job) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *Job) GetSent() string {
	if x != nil {
		return x.Sent
	}
	return ""
}

type Jobs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Jobs []*Job `protobuf:"bytes,1,rep,name=jobs,proto3" json:"jobs,omitempty"`
}

func (x *Jobs) Reset() {
	*x = Jobs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_rpc_rpc_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Jobs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Jobs) ProtoMessage() {}

func (x *Jobs) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_rpc_rpc_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Jobs.ProtoReflect.Descriptor instead.
func (*Jobs) Descriptor() ([]byte, []int) {
	return file_pkg_rpc_rpc_proto_rawDescGZIP(), []int{8}
}

func (x *Jobs) GetJobs() []*Job {
	if x != nil {
		return x.Jobs
	}
	return nil
}

type Message struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Level     MessageLevel `protobuf:"varint,1,opt,name=level,proto3,enum=rpc.MessageLevel" json:"level,omitempty"`
	Message   string       `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Timestamp string       `protobuf:"bytes,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Error     bool         `protobuf:"varint,4,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *Message) Reset() {
	*x = Message{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_rpc_rpc_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Message) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Message) ProtoMessage() {}

func (x *Message) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_rpc_rpc_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Message.ProtoReflect.Descriptor instead.
func (*Message) Descriptor() ([]byte, []int) {
	return file_pkg_rpc_rpc_proto_rawDescGZIP(), []int{9}
}

func (x *Message) GetLevel() MessageLevel {
	if x != nil {
		return x.Level
	}
	return MessageLevel_UNDEFINED
}

func (x *Message) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *Message) GetTimestamp() string {
	if x != nil {
		return x.Timestamp
	}
	return ""
}

func (x *Message) GetError() bool {
	if x != nil {
		return x.Error
	}
	return false
}

type Messages struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Messages []*Message `protobuf:"bytes,1,rep,name=messages,proto3" json:"messages,omitempty"`
}

func (x *Messages) Reset() {
	*x = Messages{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_rpc_rpc_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Messages) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Messages) ProtoMessage() {}

func (x *Messages) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_rpc_rpc_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Messages.ProtoReflect.Descriptor instead.
func (*Messages) Descriptor() ([]byte, []int) {
	return file_pkg_rpc_rpc_proto_rawDescGZIP(), []int{10}
}

func (x *Messages) GetMessages() []*Message {
	if x != nil {
		return x.Messages
	}
	return nil
}

type Options struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Options map[string]string `protobuf:"bytes,1,rep,name=options,proto3" json:"options,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Options) Reset() {
	*x = Options{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_rpc_rpc_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Options) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Options) ProtoMessage() {}

func (x *Options) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_rpc_rpc_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Options.ProtoReflect.Descriptor instead.
func (*Options) Descriptor() ([]byte, []int) {
	return file_pkg_rpc_rpc_proto_rawDescGZIP(), []int{11}
}

func (x *Options) GetOptions() map[string]string {
	if x != nil {
		return x.Options
	}
	return nil
}

type TableRows struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A list/slice of strings
	Row []string `protobuf:"bytes,1,rep,name=row,proto3" json:"row,omitempty"`
}

func (x *TableRows) Reset() {
	*x = TableRows{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_rpc_rpc_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TableRows) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TableRows) ProtoMessage() {}

func (x *TableRows) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_rpc_rpc_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TableRows.ProtoReflect.Descriptor instead.
func (*TableRows) Descriptor() ([]byte, []int) {
	return file_pkg_rpc_rpc_proto_rawDescGZIP(), []int{12}
}

func (x *TableRows) GetRow() []string {
	if x != nil {
		return x.Row
	}
	return nil
}

type TableData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Header []string `protobuf:"bytes,1,rep,name=header,proto3" json:"header,omitempty"`
	// A list of lists of strings
	Rows []*TableRows `protobuf:"bytes,2,rep,name=rows,proto3" json:"rows,omitempty"`
}

func (x *TableData) Reset() {
	*x = TableData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_rpc_rpc_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TableData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TableData) ProtoMessage() {}

func (x *TableData) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_rpc_rpc_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TableData.ProtoReflect.Descriptor instead.
func (*TableData) Descriptor() ([]byte, []int) {
	return file_pkg_rpc_rpc_proto_rawDescGZIP(), []int{13}
}

func (x *TableData) GetHeader() []string {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *TableData) GetRows() []*TableRows {
	if x != nil {
		return x.Rows
	}
	return nil
}

type Slice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []string `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *Slice) Reset() {
	*x = Slice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_rpc_rpc_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Slice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Slice) ProtoMessage() {}

func (x *Slice) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_rpc_rpc_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Slice.ProtoReflect.Descriptor instead.
func (*Slice) Descriptor() ([]byte, []int) {
	return file_pkg_rpc_rpc_proto_rawDescGZIP(), []int{14}
}

func (x *Slice) GetData() []string {
	if x != nil {
		return x.Data
	}
	return nil
}

type Group struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Group   string `protobuf:"bytes,1,opt,name=Group,proto3" json:"Group,omitempty"`
	AgentID string `protobuf:"bytes,2,opt,name=AgentID,proto3" json:"AgentID,omitempty"`
}

func (x *Group) Reset() {
	*x = Group{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_rpc_rpc_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Group) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Group) ProtoMessage() {}

func (x *Group) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_rpc_rpc_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Group.ProtoReflect.Descriptor instead.
func (*Group) Descriptor() ([]byte, []int) {
	return file_pkg_rpc_rpc_proto_rawDescGZIP(), []int{15}
}

func (x *Group) GetGroup() string {
	if x != nil {
		return x.Group
	}
	return ""
}

func (x *Group) GetAgentID() string {
	if x != nil {
		return x.AgentID
	}
	return ""
}

type GroupMember struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Group   string   `protobuf:"bytes,1,opt,name=Group,proto3" json:"Group,omitempty"`
	Members []string `protobuf:"bytes,2,rep,name=Members,proto3" json:"Members,omitempty"`
}

func (x *GroupMember) Reset() {
	*x = GroupMember{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_rpc_rpc_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupMember) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupMember) ProtoMessage() {}

func (x *GroupMember) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_rpc_rpc_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupMember.ProtoReflect.Descriptor instead.
func (*GroupMember) Descriptor() ([]byte, []int) {
	return file_pkg_rpc_rpc_proto_rawDescGZIP(), []int{16}
}

func (x *GroupMember) GetGroup() string {
	if x != nil {
		return x.Group
	}
	return ""
}

func (x *GroupMember) GetMembers() []string {
	if x != nil {
		return x.Members
	}
	return nil
}

type GroupMembers struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Members []*GroupMember `protobuf:"bytes,1,rep,name=members,proto3" json:"members,omitempty"`
}

func (x *GroupMembers) Reset() {
	*x = GroupMembers{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_rpc_rpc_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupMembers) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupMembers) ProtoMessage() {}

func (x *GroupMembers) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_rpc_rpc_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupMembers.ProtoReflect.Descriptor instead.
func (*GroupMembers) Descriptor() ([]byte, []int) {
	return file_pkg_rpc_rpc_proto_rawDescGZIP(), []int{17}
}

func (x *GroupMembers) GetMembers() []*GroupMember {
	if x != nil {
		return x.Members
	}
	return nil
}

type String struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data string `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *String) Reset() {
	*x = String{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_rpc_rpc_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *String) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*String) ProtoMessage() {}

func (x *String) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_rpc_rpc_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use String.ProtoReflect.Descriptor instead.
func (*String) Descriptor() ([]byte, []int) {
	return file_pkg_rpc_rpc_proto_rawDescGZIP(), []int{18}
}

func (x *String) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

type ModuleOption struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	Value       string `protobuf:"bytes,2,opt,name=Value,proto3" json:"Value,omitempty"`
	Required    bool   `protobuf:"varint,3,opt,name=Required,proto3" json:"Required,omitempty"`
	Flag        string `protobuf:"bytes,4,opt,name=Flag,proto3" json:"Flag,omitempty"`
	Description string `protobuf:"bytes,5,opt,name=Description,proto3" json:"Description,omitempty"`
}

func (x *ModuleOption) Reset() {
	*x = ModuleOption{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_rpc_rpc_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModuleOption) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModuleOption) ProtoMessage() {}

func (x *ModuleOption) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_rpc_rpc_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModuleOption.ProtoReflect.Descriptor instead.
func (*ModuleOption) Descriptor() ([]byte, []int) {
	return file_pkg_rpc_rpc_proto_rawDescGZIP(), []int{19}
}

func (x *ModuleOption) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ModuleOption) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *ModuleOption) GetRequired() bool {
	if x != nil {
		return x.Required
	}
	return false
}

func (x *ModuleOption) GetFlag() string {
	if x != nil {
		return x.Flag
	}
	return ""
}

func (x *ModuleOption) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

type Module struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID           string          `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Agent        string          `protobuf:"bytes,2,opt,name=Agent,proto3" json:"Agent,omitempty"`
	Name         string          `protobuf:"bytes,3,opt,name=Name,proto3" json:"Name,omitempty"`
	Extended     bool            `protobuf:"varint,4,opt,name=Extended,proto3" json:"Extended,omitempty"`
	Author       []string        `protobuf:"bytes,5,rep,name=Author,proto3" json:"Author,omitempty"`
	Credits      []string        `protobuf:"bytes,6,rep,name=Credits,proto3" json:"Credits,omitempty"`
	Path         []string        `protobuf:"bytes,7,rep,name=Path,proto3" json:"Path,omitempty"`
	Platform     string          `protobuf:"bytes,8,opt,name=Platform,proto3" json:"Platform,omitempty"`
	Arch         string          `protobuf:"bytes,9,opt,name=Arch,proto3" json:"Arch,omitempty"`
	Lang         string          `protobuf:"bytes,10,opt,name=Lang,proto3" json:"Lang,omitempty"`
	Priv         bool            `protobuf:"varint,11,opt,name=Priv,proto3" json:"Priv,omitempty"`
	Description  string          `protobuf:"bytes,12,opt,name=Description,proto3" json:"Description,omitempty"`
	Notes        string          `protobuf:"bytes,13,opt,name=Notes,proto3" json:"Notes,omitempty"`
	Commands     []string        `protobuf:"bytes,14,rep,name=Commands,proto3" json:"Commands,omitempty"`
	SourceRemote string          `protobuf:"bytes,15,opt,name=SourceRemote,proto3" json:"SourceRemote,omitempty"`
	SourceLocal  []string        `protobuf:"bytes,16,rep,name=SourceLocal,proto3" json:"SourceLocal,omitempty"`
	Options      []*ModuleOption `protobuf:"bytes,17,rep,name=Options,proto3" json:"Options,omitempty"`
}

func (x *Module) Reset() {
	*x = Module{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_rpc_rpc_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Module) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Module) ProtoMessage() {}

func (x *Module) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_rpc_rpc_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Module.ProtoReflect.Descriptor instead.
func (*Module) Descriptor() ([]byte, []int) {
	return file_pkg_rpc_rpc_proto_rawDescGZIP(), []int{20}
}

func (x *Module) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *Module) GetAgent() string {
	if x != nil {
		return x.Agent
	}
	return ""
}

func (x *Module) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Module) GetExtended() bool {
	if x != nil {
		return x.Extended
	}
	return false
}

func (x *Module) GetAuthor() []string {
	if x != nil {
		return x.Author
	}
	return nil
}

func (x *Module) GetCredits() []string {
	if x != nil {
		return x.Credits
	}
	return nil
}

func (x *Module) GetPath() []string {
	if x != nil {
		return x.Path
	}
	return nil
}

func (x *Module) GetPlatform() string {
	if x != nil {
		return x.Platform
	}
	return ""
}

func (x *Module) GetArch() string {
	if x != nil {
		return x.Arch
	}
	return ""
}

func (x *Module) GetLang() string {
	if x != nil {
		return x.Lang
	}
	return ""
}

func (x *Module) GetPriv() bool {
	if x != nil {
		return x.Priv
	}
	return false
}

func (x *Module) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Module) GetNotes() string {
	if x != nil {
		return x.Notes
	}
	return ""
}

func (x *Module) GetCommands() []string {
	if x != nil {
		return x.Commands
	}
	return nil
}

func (x *Module) GetSourceRemote() string {
	if x != nil {
		return x.SourceRemote
	}
	return ""
}

func (x *Module) GetSourceLocal() []string {
	if x != nil {
		return x.SourceLocal
	}
	return nil
}

func (x *Module) GetOptions() []*ModuleOption {
	if x != nil {
		return x.Options
	}
	return nil
}

type ModuleRun struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name     string          `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	Agent    string          `protobuf:"bytes,2,opt,name=Agent,proto3" json:"Agent,omitempty"`
	Platform string          `protobuf:"bytes,3,opt,name=Platform,proto3" json:"Platform,omitempty"`
	Options  []*ModuleOption `protobuf:"bytes,4,rep,name=Options,proto3" json:"Options,omitempty"`
	Extended bool            `protobuf:"varint,5,opt,name=Extended,proto3" json:"Extended,omitempty"`
	Commands []string        `protobuf:"bytes,6,rep,name=Commands,proto3" json:"Commands,omitempty"`
}

func (x *ModuleRun) Reset() {
	*x = ModuleRun{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_rpc_rpc_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModuleRun) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModuleRun) ProtoMessage() {}

func (x *ModuleRun) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_rpc_rpc_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModuleRun.ProtoReflect.Descriptor instead.
func (*ModuleRun) Descriptor() ([]byte, []int) {
	return file_pkg_rpc_rpc_proto_rawDescGZIP(), []int{21}
}

func (x *ModuleRun) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ModuleRun) GetAgent() string {
	if x != nil {
		return x.Agent
	}
	return ""
}

func (x *ModuleRun) GetPlatform() string {
	if x != nil {
		return x.Platform
	}
	return ""
}

func (x *ModuleRun) GetOptions() []*ModuleOption {
	if x != nil {
		return x.Options
	}
	return nil
}

func (x *ModuleRun) GetExtended() bool {
	if x != nil {
		return x.Extended
	}
	return false
}

func (x *ModuleRun) GetCommands() []string {
	if x != nil {
		return x.Commands
	}
	return nil
}

type Login struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Username string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	Password string `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
}

func (x *Login) Reset() {
	*x = Login{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_rpc_rpc_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Login) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Login) ProtoMessage() {}

func (x *Login) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_rpc_rpc_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Login.ProtoReflect.Descriptor instead.
func (*Login) Descriptor() ([]byte, []int) {
	return file_pkg_rpc_rpc_proto_rawDescGZIP(), []int{22}
}

func (x *Login) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *Login) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

var File_pkg_rpc_rpc_proto protoreflect.FileDescriptor

var file_pkg_rpc_rpc_proto_rawDesc = []byte{
	0x0a, 0x11, 0x70, 0x6b, 0x67, 0x2f, 0x72, 0x70, 0x63, 0x2f, 0x72, 0x70, 0x63, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x03, 0x72, 0x70, 0x63, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x14, 0x0a, 0x02, 0x49, 0x44, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0xa2, 0x03, 0x0a, 0x09,
	0x41, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x41, 0x6c, 0x69,
	0x76, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x41, 0x6c, 0x69, 0x76, 0x65, 0x12,
	0x24, 0x0a, 0x0d, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69,
	0x63, 0x61, 0x74, 0x65, 0x64, 0x12, 0x20, 0x0a, 0x05, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x42, 0x75, 0x69, 0x6c, 0x64,
	0x52, 0x05, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x12, 0x1d, 0x0a, 0x04, 0x48, 0x6f, 0x73, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x48, 0x6f, 0x73, 0x74,
	0x52, 0x04, 0x48, 0x6f, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x07, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x52, 0x07, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x12, 0x20,
	0x0a, 0x05, 0x43, 0x6f, 0x6d, 0x6d, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e,
	0x72, 0x70, 0x63, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x73, 0x52, 0x05, 0x43, 0x6f, 0x6d, 0x6d, 0x73,
	0x12, 0x26, 0x0a, 0x0e, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x69, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61,
	0x6c, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x69, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x4c, 0x61, 0x73, 0x74,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x69, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x4c,
	0x61, 0x73, 0x74, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x69, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x4c, 0x69,
	0x6e, 0x6b, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x4c, 0x69, 0x6e, 0x6b, 0x73,
	0x12, 0x1a, 0x0a, 0x08, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04,
	0x4e, 0x6f, 0x74, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x6f, 0x74, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73,
	0x22, 0x37, 0x0a, 0x05, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x42, 0x75, 0x69,
	0x6c, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x12,
	0x18, 0x0a, 0x07, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xc1, 0x01, 0x0a, 0x05, 0x43, 0x6f,
	0x6d, 0x6d, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x4a,
	0x41, 0x33, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x4a, 0x41, 0x33, 0x12, 0x1a, 0x0a,
	0x08, 0x4b, 0x69, 0x6c, 0x6c, 0x44, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x08, 0x4b, 0x69, 0x6c, 0x6c, 0x44, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x50, 0x61, 0x64,
	0x64, 0x69, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x50, 0x61, 0x64, 0x64,
	0x69, 0x6e, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12,
	0x14, 0x0a, 0x05, 0x52, 0x65, 0x74, 0x72, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x52, 0x65, 0x74, 0x72, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x53, 0x6b, 0x65, 0x77, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x04, 0x53, 0x6b, 0x65, 0x77, 0x12, 0x12, 0x0a, 0x04, 0x57, 0x61, 0x69,
	0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x57, 0x61, 0x69, 0x74, 0x22, 0x6c, 0x0a,
	0x04, 0x48, 0x6f, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x41, 0x72, 0x63, 0x68, 0x69, 0x74, 0x65,
	0x63, 0x74, 0x75, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x41, 0x72, 0x63,
	0x68, 0x69, 0x74, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x10, 0x0a, 0x03, 0x49, 0x50, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x49, 0x50, 0x73, 0x22, 0xa5, 0x01, 0x0a, 0x07,
	0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x02, 0x49, 0x44, 0x12, 0x26, 0x0a, 0x0e, 0x49, 0x6e, 0x74, 0x65, 0x67,
	0x72, 0x69, 0x74, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0e, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x69, 0x74, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12,
	0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x55, 0x73, 0x65, 0x72, 0x47, 0x55, 0x49, 0x44, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x55, 0x73, 0x65, 0x72, 0x47, 0x55, 0x49, 0x44, 0x12,
	0x1a, 0x0a, 0x08, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x44,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x44, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x22, 0x38, 0x0a, 0x08, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x43, 0x4d, 0x44, 0x12,
	0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x12,
	0x1c, 0x0a, 0x09, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x09, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0xad, 0x01,
	0x0a, 0x03, 0x4a, 0x6f, 0x62, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x44,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x12,
	0x18, 0x0a, 0x07, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65,
	0x64, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x53, 0x65, 0x6e,
	0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x53, 0x65, 0x6e, 0x74, 0x22, 0x24, 0x0a,
	0x04, 0x4a, 0x6f, 0x62, 0x73, 0x12, 0x1c, 0x0a, 0x04, 0x6a, 0x6f, 0x62, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x4a, 0x6f, 0x62, 0x52, 0x04, 0x6a,
	0x6f, 0x62, 0x73, 0x22, 0x80, 0x01, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x27, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11,
	0x2e, 0x72, 0x70, 0x63, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x34, 0x0a, 0x08, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x73, 0x12, 0x28, 0x0a, 0x08, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x52, 0x08, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x22, 0x7a, 0x0a, 0x07,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x33, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x3a, 0x0a, 0x0c,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x1d, 0x0a, 0x09, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x52, 0x6f, 0x77, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x6f, 0x77, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x03, 0x72, 0x6f, 0x77, 0x22, 0x47, 0x0a, 0x09, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x04,
	0x72, 0x6f, 0x77, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x72, 0x70, 0x63,
	0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x6f, 0x77, 0x73, 0x52, 0x04, 0x72, 0x6f, 0x77, 0x73,
	0x22, 0x1b, 0x0a, 0x05, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x37, 0x0a,
	0x05, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x18, 0x0a, 0x07,
	0x41, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x41,
	0x67, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x22, 0x3d, 0x0a, 0x0b, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x4d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x4d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x73, 0x22, 0x3a, 0x0a, 0x0c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x73, 0x12, 0x2a, 0x0a, 0x07, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x07, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x73, 0x22, 0x1c, 0x0a, 0x06, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22,
	0x8a, 0x01, 0x0a, 0x0c, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x52, 0x65,
	0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x52, 0x65,
	0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x46, 0x6c, 0x61, 0x67, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x20, 0x0a, 0x0b, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xc3, 0x03, 0x0a,
	0x06, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x41, 0x67, 0x65, 0x6e, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x08, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x12, 0x16, 0x0a,
	0x06, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x41,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x73,
	0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x43, 0x72, 0x65, 0x64, 0x69, 0x74, 0x73, 0x12,
	0x12, 0x0a, 0x04, 0x50, 0x61, 0x74, 0x68, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x50,
	0x61, 0x74, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12,
	0x12, 0x0a, 0x04, 0x41, 0x72, 0x63, 0x68, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x41,
	0x72, 0x63, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x4c, 0x61, 0x6e, 0x67, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x4c, 0x61, 0x6e, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x50, 0x72, 0x69, 0x76, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x50, 0x72, 0x69, 0x76, 0x12, 0x20, 0x0a, 0x0b, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a,
	0x05, 0x4e, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x4e, 0x6f,
	0x74, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x18,
	0x0e, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x12,
	0x22, 0x0a, 0x0c, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x6d,
	0x6f, 0x74, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4c, 0x6f, 0x63,
	0x61, 0x6c, 0x18, 0x10, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x12, 0x2b, 0x0a, 0x07, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x11, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x4d, 0x6f, 0x64,
	0x75, 0x6c, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x22, 0xb6, 0x01, 0x0a, 0x09, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x75, 0x6e,
	0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x50, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x2b, 0x0a, 0x07, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x4d, 0x6f,
	0x64, 0x75, 0x6c, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x12,
	0x1a, 0x0a, 0x08, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x08, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x22, 0x3f, 0x0a, 0x05, 0x4c,
	0x6f, 0x67, 0x69, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x2a, 0x5e, 0x0a, 0x0c,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x0d, 0x0a, 0x09,
	0x55, 0x4e, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x44, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x49,
	0x4e, 0x46, 0x4f, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x54, 0x45, 0x10, 0x02, 0x12,
	0x08, 0x0a, 0x04, 0x57, 0x41, 0x52, 0x4e, 0x10, 0x03, 0x12, 0x09, 0x0a, 0x05, 0x44, 0x45, 0x42,
	0x55, 0x47, 0x10, 0x04, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10,
	0x05, 0x12, 0x09, 0x0a, 0x05, 0x50, 0x4c, 0x41, 0x49, 0x4e, 0x10, 0x06, 0x32, 0xec, 0x1b, 0x0a,
	0x06, 0x4d, 0x65, 0x72, 0x6c, 0x69, 0x6e, 0x12, 0x1f, 0x0a, 0x09, 0x52, 0x65, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x12, 0x07, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x49, 0x44, 0x1a, 0x07, 0x2e,
	0x72, 0x70, 0x63, 0x2e, 0x49, 0x44, 0x22, 0x00, 0x12, 0x2d, 0x0a, 0x08, 0x52, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x65, 0x72, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x07, 0x2e, 0x72,
	0x70, 0x63, 0x2e, 0x49, 0x44, 0x22, 0x00, 0x12, 0x23, 0x0a, 0x06, 0x4c, 0x69, 0x73, 0x74, 0x65,
	0x6e, 0x12, 0x07, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x49, 0x44, 0x1a, 0x0c, 0x2e, 0x72, 0x70, 0x63,
	0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x00, 0x30, 0x01, 0x12, 0x24, 0x0a, 0x03,
	0x41, 0x6e, 0x79, 0x12, 0x0d, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x43,
	0x4d, 0x44, 0x1a, 0x0c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x22, 0x00, 0x12, 0x23, 0x0a, 0x02, 0x43, 0x44, 0x12, 0x0d, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x41,
	0x67, 0x65, 0x6e, 0x74, 0x43, 0x4d, 0x44, 0x1a, 0x0c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x00, 0x12, 0x22, 0x0a, 0x07, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x49, 0x6e, 0x12, 0x07, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x49, 0x44, 0x1a, 0x0c, 0x2e, 0x72, 0x70,
	0x63, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x00, 0x12, 0x24, 0x0a, 0x09, 0x43,
	0x6c, 0x65, 0x61, 0x72, 0x4a, 0x6f, 0x62, 0x73, 0x12, 0x07, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x49,
	0x44, 0x1a, 0x0c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22,
	0x00, 0x12, 0x3a, 0x0a, 0x10, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x4a, 0x6f, 0x62, 0x73, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x0c, 0x2e,
	0x72, 0x70, 0x63, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x00, 0x12, 0x24, 0x0a,
	0x03, 0x43, 0x4d, 0x44, 0x12, 0x0d, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74,
	0x43, 0x4d, 0x44, 0x1a, 0x0c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x22, 0x00, 0x12, 0x28, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x12, 0x0d,
	0x2e, 0x72, 0x70, 0x63, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x43, 0x4d, 0x44, 0x1a, 0x0c, 0x2e,
	0x72, 0x70, 0x63, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x00, 0x12, 0x29, 0x0a,
	0x08, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x0d, 0x2e, 0x72, 0x70, 0x63, 0x2e,
	0x41, 0x67, 0x65, 0x6e, 0x74, 0x43, 0x4d, 0x44, 0x1a, 0x0c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x00, 0x12, 0x24, 0x0a, 0x03, 0x45, 0x4e, 0x56, 0x12,
	0x0d, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x43, 0x4d, 0x44, 0x1a, 0x0c,
	0x2e, 0x72, 0x70, 0x63, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x00, 0x12, 0x30,
	0x0a, 0x0f, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x41, 0x73, 0x73, 0x65, 0x6d, 0x62, 0x6c,
	0x79, 0x12, 0x0d, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x43, 0x4d, 0x44,
	0x1a, 0x0c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x00,
	0x12, 0x2a, 0x0a, 0x09, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x50, 0x45, 0x12, 0x0d, 0x2e,
	0x72, 0x70, 0x63, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x43, 0x4d, 0x44, 0x1a, 0x0c, 0x2e, 0x72,
	0x70, 0x63, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x00, 0x12, 0x31, 0x0a, 0x10,
	0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x53, 0x68, 0x65, 0x6c, 0x6c, 0x63, 0x6f, 0x64, 0x65,
	0x12, 0x0d, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x43, 0x4d, 0x44, 0x1a,
	0x0c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x00, 0x12,
	0x1f, 0x0a, 0x04, 0x45, 0x78, 0x69, 0x74, 0x12, 0x07, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x49, 0x44,
	0x1a, 0x0c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x00,
	0x12, 0x23, 0x0a, 0x08, 0x49, 0x46, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x07, 0x2e, 0x72,
	0x70, 0x63, 0x2e, 0x49, 0x44, 0x1a, 0x0c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x22, 0x00, 0x12, 0x2f, 0x0a, 0x0e, 0x49, 0x6e, 0x76, 0x6f, 0x6b, 0x65, 0x41,
	0x73, 0x73, 0x65, 0x6d, 0x62, 0x6c, 0x79, 0x12, 0x0d, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x41, 0x67,
	0x65, 0x6e, 0x74, 0x43, 0x4d, 0x44, 0x1a, 0x0c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x22, 0x00, 0x12, 0x24, 0x0a, 0x03, 0x4a, 0x41, 0x33, 0x12, 0x0d, 0x2e,
	0x72, 0x70, 0x63, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x43, 0x4d, 0x44, 0x1a, 0x0c, 0x2e, 0x72,
	0x70, 0x63, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x00, 0x12, 0x29, 0x0a, 0x08,
	0x4b, 0x69, 0x6c, 0x6c, 0x44, 0x61, 0x74, 0x65, 0x12, 0x0d, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x41,
	0x67, 0x65, 0x6e, 0x74, 0x43, 0x4d, 0x44, 0x1a, 0x0c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x00, 0x12, 0x2c, 0x0a, 0x0b, 0x4b, 0x69, 0x6c, 0x6c, 0x50,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x12, 0x0d, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x41, 0x67, 0x65,
	0x6e, 0x74, 0x43, 0x4d, 0x44, 0x1a, 0x0c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x22, 0x00, 0x12, 0x2a, 0x0a, 0x09, 0x4c, 0x69, 0x6e, 0x6b, 0x41, 0x67, 0x65,
	0x6e, 0x74, 0x12, 0x0d, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x43, 0x4d,
	0x44, 0x1a, 0x0c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22,
	0x00, 0x12, 0x29, 0x0a, 0x0e, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x73, 0x73, 0x65, 0x6d, 0x62, 0x6c,
	0x69, 0x65, 0x73, 0x12, 0x07, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x49, 0x44, 0x1a, 0x0c, 0x2e, 0x72,
	0x70, 0x63, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x00, 0x12, 0x29, 0x0a, 0x08,
	0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x12, 0x0d, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x41,
	0x67, 0x65, 0x6e, 0x74, 0x43, 0x4d, 0x44, 0x1a, 0x0c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x00, 0x12, 0x2d, 0x0a, 0x0c, 0x4c, 0x6f, 0x61, 0x64, 0x41,
	0x73, 0x73, 0x65, 0x6d, 0x62, 0x6c, 0x79, 0x12, 0x0d, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x41, 0x67,
	0x65, 0x6e, 0x74, 0x43, 0x4d, 0x44, 0x1a, 0x0c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x22, 0x00, 0x12, 0x28, 0x0a, 0x07, 0x4c, 0x6f, 0x61, 0x64, 0x43, 0x4c,
	0x52, 0x12, 0x0d, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x43, 0x4d, 0x44,
	0x1a, 0x0c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x00,
	0x12, 0x23, 0x0a, 0x02, 0x4c, 0x53, 0x12, 0x0d, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x41, 0x67, 0x65,
	0x6e, 0x74, 0x43, 0x4d, 0x44, 0x1a, 0x0c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x22, 0x00, 0x12, 0x29, 0x0a, 0x08, 0x4d, 0x61, 0x78, 0x52, 0x65, 0x74, 0x72,
	0x79, 0x12, 0x0d, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x43, 0x4d, 0x44,
	0x1a, 0x0c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x00,
	0x12, 0x27, 0x0a, 0x06, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x12, 0x0d, 0x2e, 0x72, 0x70, 0x63,
	0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x43, 0x4d, 0x44, 0x1a, 0x0c, 0x2e, 0x72, 0x70, 0x63, 0x2e,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x00, 0x12, 0x26, 0x0a, 0x05, 0x4d, 0x45, 0x4d,
	0x46, 0x44, 0x12, 0x0d, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x43, 0x4d,
	0x44, 0x1a, 0x0c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22,
	0x00, 0x12, 0x28, 0x0a, 0x07, 0x4e, 0x65, 0x74, 0x73, 0x74, 0x61, 0x74, 0x12, 0x0d, 0x2e, 0x72,
	0x70, 0x63, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x43, 0x4d, 0x44, 0x1a, 0x0c, 0x2e, 0x72, 0x70,
	0x63, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x00, 0x12, 0x25, 0x0a, 0x04, 0x4e,
	0x6f, 0x74, 0x65, 0x12, 0x0d, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x43,
	0x4d, 0x44, 0x1a, 0x0c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x22, 0x00, 0x12, 0x29, 0x0a, 0x08, 0x4e, 0x73, 0x6c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x12, 0x0d,
	0x2e, 0x72, 0x70, 0x63, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x43, 0x4d, 0x44, 0x1a, 0x0c, 0x2e,
	0x72, 0x70, 0x63, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x00, 0x12, 0x28, 0x0a,
	0x07, 0x50, 0x61, 0x64, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x0d, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x41,
	0x67, 0x65, 0x6e, 0x74, 0x43, 0x4d, 0x44, 0x1a, 0x0c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x00, 0x12, 0x27, 0x0a, 0x06, 0x50, 0x61, 0x72, 0x72, 0x6f,
	0x74, 0x12, 0x0d, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x43, 0x4d, 0x44,
	0x1a, 0x0c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x00,
	0x12, 0x20, 0x0a, 0x05, 0x50, 0x69, 0x70, 0x65, 0x73, 0x12, 0x07, 0x2e, 0x72, 0x70, 0x63, 0x2e,
	0x49, 0x44, 0x1a, 0x0c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x22, 0x00, 0x12, 0x1d, 0x0a, 0x02, 0x50, 0x53, 0x12, 0x07, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x49,
	0x44, 0x1a, 0x0c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22,
	0x00, 0x12, 0x1e, 0x0a, 0x03, 0x50, 0x57, 0x44, 0x12, 0x07, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x49,
	0x44, 0x1a, 0x0c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22,
	0x00, 0x12, 0x23, 0x0a, 0x02, 0x52, 0x4d, 0x12, 0x0d, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x41, 0x67,
	0x65, 0x6e, 0x74, 0x43, 0x4d, 0x44, 0x1a, 0x0c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x22, 0x00, 0x12, 0x26, 0x0a, 0x05, 0x52, 0x75, 0x6e, 0x41, 0x73, 0x12,
	0x0d, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x43, 0x4d, 0x44, 0x1a, 0x0c,
	0x2e, 0x72, 0x70, 0x63, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x00, 0x12, 0x2d,
	0x0a, 0x0c, 0x53, 0x65, 0x63, 0x75, 0x72, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x0d,
	0x2e, 0x72, 0x70, 0x63, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x43, 0x4d, 0x44, 0x1a, 0x0c, 0x2e,
	0x72, 0x70, 0x63, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x00, 0x12, 0x29, 0x0a,
	0x08, 0x53, 0x68, 0x61, 0x72, 0x70, 0x47, 0x65, 0x6e, 0x12, 0x0d, 0x2e, 0x72, 0x70, 0x63, 0x2e,
	0x41, 0x67, 0x65, 0x6e, 0x74, 0x43, 0x4d, 0x44, 0x1a, 0x0c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x00, 0x12, 0x25, 0x0a, 0x04, 0x53, 0x6b, 0x65, 0x77,
	0x12, 0x0d, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x43, 0x4d, 0x44, 0x1a,
	0x0c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x00, 0x12,
	0x26, 0x0a, 0x05, 0x53, 0x6c, 0x65, 0x65, 0x70, 0x12, 0x0d, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x41,
	0x67, 0x65, 0x6e, 0x74, 0x43, 0x4d, 0x44, 0x1a, 0x0c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x00, 0x12, 0x26, 0x0a, 0x05, 0x53, 0x6f, 0x63, 0x6b, 0x73,
	0x12, 0x0d, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x43, 0x4d, 0x44, 0x1a,
	0x0c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x00, 0x12,
	0x24, 0x0a, 0x03, 0x53, 0x53, 0x48, 0x12, 0x0d, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x41, 0x67, 0x65,
	0x6e, 0x74, 0x43, 0x4d, 0x44, 0x1a, 0x0c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x22, 0x00, 0x12, 0x26, 0x0a, 0x05, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x0d,
	0x2e, 0x72, 0x70, 0x63, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x43, 0x4d, 0x44, 0x1a, 0x0c, 0x2e,
	0x72, 0x70, 0x63, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x00, 0x12, 0x26, 0x0a,
	0x05, 0x54, 0x6f, 0x75, 0x63, 0x68, 0x12, 0x0d, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x41, 0x67, 0x65,
	0x6e, 0x74, 0x43, 0x4d, 0x44, 0x1a, 0x0c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x22, 0x00, 0x12, 0x2c, 0x0a, 0x0b, 0x55, 0x6e, 0x6c, 0x69, 0x6e, 0x6b, 0x41,
	0x67, 0x65, 0x6e, 0x74, 0x12, 0x0d, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74,
	0x43, 0x4d, 0x44, 0x1a, 0x0c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x22, 0x00, 0x12, 0x27, 0x0a, 0x06, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x0d, 0x2e,
	0x72, 0x70, 0x63, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x43, 0x4d, 0x44, 0x1a, 0x0c, 0x2e, 0x72,
	0x70, 0x63, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x00, 0x12, 0x21, 0x0a, 0x06,
	0x55, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x07, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x49, 0x44, 0x1a,
	0x0c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x00, 0x12,
	0x2e, 0x0a, 0x06, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x1a, 0x0a, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x22, 0x00, 0x12,
	0x26, 0x0a, 0x08, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x64, 0x64, 0x12, 0x0a, 0x2e, 0x72, 0x70,
	0x63, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x1a, 0x0c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x00, 0x12, 0x22, 0x0a, 0x09, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x07, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x49, 0x44, 0x1a, 0x0a, 0x2e,
	0x72, 0x70, 0x63, 0x2e, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x22, 0x00, 0x12, 0x3b, 0x0a, 0x0c, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x41, 0x6c, 0x6c, 0x12, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x1a, 0x11, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x22, 0x00, 0x12, 0x29, 0x0a, 0x0b, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x12, 0x0a, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x1a, 0x0c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x22, 0x00, 0x12, 0x25, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x12,
	0x07, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x49, 0x44, 0x1a, 0x0e, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x41,
	0x67, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x00, 0x12, 0x31, 0x0a, 0x09, 0x47, 0x65,
	0x74, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a,
	0x0a, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x22, 0x00, 0x12, 0x26, 0x0a,
	0x0d, 0x47, 0x65, 0x74, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x12, 0x07,
	0x2e, 0x72, 0x70, 0x63, 0x2e, 0x49, 0x44, 0x1a, 0x0a, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x6c,
	0x69, 0x63, 0x65, 0x22, 0x00, 0x12, 0x29, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x41, 0x67, 0x65, 0x6e,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x07, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x49, 0x44,
	0x1a, 0x0c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x00,
	0x12, 0x38, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x6f, 0x77, 0x73,
	0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x0e, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x22, 0x00, 0x12, 0x21, 0x0a, 0x06, 0x52, 0x65,
	0x6d, 0x6f, 0x76, 0x65, 0x12, 0x07, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x49, 0x44, 0x1a, 0x0c, 0x2e,
	0x72, 0x70, 0x63, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x00, 0x12, 0x31, 0x0a,
	0x0a, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x4a, 0x6f, 0x62, 0x73, 0x12, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x1a, 0x09, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x4a, 0x6f, 0x62, 0x73, 0x22, 0x00,
	0x12, 0x37, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x4a, 0x6f, 0x62, 0x73, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x09, 0x2e, 0x72,
	0x70, 0x63, 0x2e, 0x4a, 0x6f, 0x62, 0x73, 0x22, 0x00, 0x12, 0x24, 0x0a, 0x0c, 0x47, 0x65, 0x74,
	0x41, 0x67, 0x65, 0x6e, 0x74, 0x4a, 0x6f, 0x62, 0x73, 0x12, 0x07, 0x2e, 0x72, 0x70, 0x63, 0x2e,
	0x49, 0x44, 0x1a, 0x09, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x4a, 0x6f, 0x62, 0x73, 0x22, 0x00, 0x12,
	0x2a, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x4a, 0x6f, 0x62, 0x73, 0x12, 0x07, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x49, 0x44, 0x1a, 0x09,
	0x2e, 0x72, 0x70, 0x63, 0x2e, 0x4a, 0x6f, 0x62, 0x73, 0x22, 0x00, 0x12, 0x2e, 0x0a, 0x0e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x12, 0x0c, 0x2e,
	0x72, 0x70, 0x63, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x0c, 0x2e, 0x72, 0x70,
	0x63, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x00, 0x12, 0x36, 0x0a, 0x0e, 0x47,
	0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x49, 0x44, 0x73, 0x12, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x0a, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x6c, 0x69, 0x63,
	0x65, 0x22, 0x00, 0x12, 0x38, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e,
	0x65, 0x72, 0x73, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x0e, 0x2e, 0x72, 0x70,
	0x63, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x22, 0x00, 0x12, 0x2d, 0x0a,
	0x12, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x07, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x49, 0x44, 0x1a, 0x0c, 0x2e, 0x72,
	0x70, 0x63, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x00, 0x12, 0x38, 0x0a, 0x19,
	0x47, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x44, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x0b, 0x2e, 0x72, 0x70, 0x63, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x1a, 0x0c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x22, 0x00, 0x12, 0x38, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x73,
	0x74, 0x65, 0x6e, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x1a, 0x0a, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x22, 0x00,
	0x12, 0x2c, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x07, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x49, 0x44, 0x1a, 0x0c,
	0x2e, 0x72, 0x70, 0x63, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x00, 0x12, 0x29,
	0x0a, 0x0e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72,
	0x12, 0x07, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x49, 0x44, 0x1a, 0x0c, 0x2e, 0x72, 0x70, 0x63, 0x2e,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x00, 0x12, 0x2a, 0x0a, 0x0f, 0x52, 0x65, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x12, 0x07, 0x2e, 0x72,
	0x70, 0x63, 0x2e, 0x49, 0x44, 0x1a, 0x0c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x22, 0x00, 0x12, 0x32, 0x0a, 0x11, 0x53, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74,
	0x65, 0x6e, 0x65, 0x72, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0d, 0x2e, 0x72, 0x70, 0x63,
	0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x43, 0x4d, 0x44, 0x1a, 0x0c, 0x2e, 0x72, 0x70, 0x63, 0x2e,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x00, 0x12, 0x28, 0x0a, 0x0d, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x12, 0x07, 0x2e, 0x72, 0x70, 0x63,
	0x2e, 0x49, 0x44, 0x1a, 0x0c, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x22, 0x00, 0x12, 0x27, 0x0a, 0x0c, 0x53, 0x74, 0x6f, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x65,
	0x6e, 0x65, 0x72, 0x12, 0x07, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x49, 0x44, 0x1a, 0x0c, 0x2e, 0x72,
	0x70, 0x63, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x00, 0x12, 0x2f, 0x0a, 0x07,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a,
	0x0a, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x22, 0x00, 0x12, 0x27, 0x0a,
	0x09, 0x47, 0x65, 0x74, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x0b, 0x2e, 0x72, 0x70, 0x63,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x1a, 0x0b, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x4d, 0x6f,
	0x64, 0x75, 0x6c, 0x65, 0x22, 0x00, 0x12, 0x35, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x4d, 0x6f, 0x64,
	0x75, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a,
	0x0a, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x22, 0x00, 0x12, 0x2c, 0x0a,
	0x09, 0x52, 0x75, 0x6e, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x0e, 0x2e, 0x72, 0x70, 0x63,
	0x2e, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x75, 0x6e, 0x1a, 0x0d, 0x2e, 0x72, 0x70, 0x63,
	0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x22, 0x00, 0x42, 0x23, 0x5a, 0x21, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x4e, 0x65, 0x30, 0x6e, 0x64, 0x30,
	0x67, 0x2f, 0x6d, 0x65, 0x72, 0x6c, 0x69, 0x6e, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x72, 0x70, 0x63,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_pkg_rpc_rpc_proto_rawDescOnce sync.Once
	file_pkg_rpc_rpc_proto_rawDescData = file_pkg_rpc_rpc_proto_rawDesc
)

func file_pkg_rpc_rpc_proto_rawDescGZIP() []byte {
	file_pkg_rpc_rpc_proto_rawDescOnce.Do(func() {
		file_pkg_rpc_rpc_proto_rawDescData = protoimpl.X.CompressGZIP(file_pkg_rpc_rpc_proto_rawDescData)
	})
	return file_pkg_rpc_rpc_proto_rawDescData
}

var file_pkg_rpc_rpc_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_pkg_rpc_rpc_proto_msgTypes = make([]protoimpl.MessageInfo, 24)
var file_pkg_rpc_rpc_proto_goTypes = []interface{}{
	(MessageLevel)(0),     // 0: rpc.MessageLevel
	(*ID)(nil),            // 1: rpc.ID
	(*AgentInfo)(nil),     // 2: rpc.AgentInfo
	(*Build)(nil),         // 3: rpc.Build
	(*Comms)(nil),         // 4: rpc.Comms
	(*Host)(nil),          // 5: rpc.Host
	(*Process)(nil),       // 6: rpc.Process
	(*AgentCMD)(nil),      // 7: rpc.AgentCMD
	(*Job)(nil),           // 8: rpc.Job
	(*Jobs)(nil),          // 9: rpc.Jobs
	(*Message)(nil),       // 10: rpc.Message
	(*Messages)(nil),      // 11: rpc.Messages
	(*Options)(nil),       // 12: rpc.Options
	(*TableRows)(nil),     // 13: rpc.TableRows
	(*TableData)(nil),     // 14: rpc.TableData
	(*Slice)(nil),         // 15: rpc.Slice
	(*Group)(nil),         // 16: rpc.Group
	(*GroupMember)(nil),   // 17: rpc.GroupMember
	(*GroupMembers)(nil),  // 18: rpc.GroupMembers
	(*String)(nil),        // 19: rpc.String
	(*ModuleOption)(nil),  // 20: rpc.ModuleOption
	(*Module)(nil),        // 21: rpc.Module
	(*ModuleRun)(nil),     // 22: rpc.ModuleRun
	(*Login)(nil),         // 23: rpc.Login
	nil,                   // 24: rpc.Options.OptionsEntry
	(*emptypb.Empty)(nil), // 25: google.protobuf.Empty
}
var file_pkg_rpc_rpc_proto_depIdxs = []int32{
	3,  // 0: rpc.AgentInfo.Build:type_name -> rpc.Build
	5,  // 1: rpc.AgentInfo.Host:type_name -> rpc.Host
	6,  // 2: rpc.AgentInfo.Process:type_name -> rpc.Process
	4,  // 3: rpc.AgentInfo.Comms:type_name -> rpc.Comms
	8,  // 4: rpc.Jobs.jobs:type_name -> rpc.Job
	0,  // 5: rpc.Message.level:type_name -> rpc.MessageLevel
	10, // 6: rpc.Messages.messages:type_name -> rpc.Message
	24, // 7: rpc.Options.options:type_name -> rpc.Options.OptionsEntry
	13, // 8: rpc.TableData.rows:type_name -> rpc.TableRows
	17, // 9: rpc.GroupMembers.members:type_name -> rpc.GroupMember
	20, // 10: rpc.Module.Options:type_name -> rpc.ModuleOption
	20, // 11: rpc.ModuleRun.Options:type_name -> rpc.ModuleOption
	1,  // 12: rpc.Merlin.Reconnect:input_type -> rpc.ID
	25, // 13: rpc.Merlin.Register:input_type -> google.protobuf.Empty
	1,  // 14: rpc.Merlin.Listen:input_type -> rpc.ID
	7,  // 15: rpc.Merlin.Any:input_type -> rpc.AgentCMD
	7,  // 16: rpc.Merlin.CD:input_type -> rpc.AgentCMD
	1,  // 17: rpc.Merlin.CheckIn:input_type -> rpc.ID
	1,  // 18: rpc.Merlin.ClearJobs:input_type -> rpc.ID
	25, // 19: rpc.Merlin.ClearJobsCreated:input_type -> google.protobuf.Empty
	7,  // 20: rpc.Merlin.CMD:input_type -> rpc.AgentCMD
	7,  // 21: rpc.Merlin.Connect:input_type -> rpc.AgentCMD
	7,  // 22: rpc.Merlin.Download:input_type -> rpc.AgentCMD
	7,  // 23: rpc.Merlin.ENV:input_type -> rpc.AgentCMD
	7,  // 24: rpc.Merlin.ExecuteAssembly:input_type -> rpc.AgentCMD
	7,  // 25: rpc.Merlin.ExecutePE:input_type -> rpc.AgentCMD
	7,  // 26: rpc.Merlin.ExecuteShellcode:input_type -> rpc.AgentCMD
	1,  // 27: rpc.Merlin.Exit:input_type -> rpc.ID
	1,  // 28: rpc.Merlin.IFConfig:input_type -> rpc.ID
	7,  // 29: rpc.Merlin.InvokeAssembly:input_type -> rpc.AgentCMD
	7,  // 30: rpc.Merlin.JA3:input_type -> rpc.AgentCMD
	7,  // 31: rpc.Merlin.KillDate:input_type -> rpc.AgentCMD
	7,  // 32: rpc.Merlin.KillProcess:input_type -> rpc.AgentCMD
	7,  // 33: rpc.Merlin.LinkAgent:input_type -> rpc.AgentCMD
	1,  // 34: rpc.Merlin.ListAssemblies:input_type -> rpc.ID
	7,  // 35: rpc.Merlin.Listener:input_type -> rpc.AgentCMD
	7,  // 36: rpc.Merlin.LoadAssembly:input_type -> rpc.AgentCMD
	7,  // 37: rpc.Merlin.LoadCLR:input_type -> rpc.AgentCMD
	7,  // 38: rpc.Merlin.LS:input_type -> rpc.AgentCMD
	7,  // 39: rpc.Merlin.MaxRetry:input_type -> rpc.AgentCMD
	7,  // 40: rpc.Merlin.Memory:input_type -> rpc.AgentCMD
	7,  // 41: rpc.Merlin.MEMFD:input_type -> rpc.AgentCMD
	7,  // 42: rpc.Merlin.Netstat:input_type -> rpc.AgentCMD
	7,  // 43: rpc.Merlin.Note:input_type -> rpc.AgentCMD
	7,  // 44: rpc.Merlin.Nslookup:input_type -> rpc.AgentCMD
	7,  // 45: rpc.Merlin.Padding:input_type -> rpc.AgentCMD
	7,  // 46: rpc.Merlin.Parrot:input_type -> rpc.AgentCMD
	1,  // 47: rpc.Merlin.Pipes:input_type -> rpc.ID
	1,  // 48: rpc.Merlin.PS:input_type -> rpc.ID
	1,  // 49: rpc.Merlin.PWD:input_type -> rpc.ID
	7,  // 50: rpc.Merlin.RM:input_type -> rpc.AgentCMD
	7,  // 51: rpc.Merlin.RunAs:input_type -> rpc.AgentCMD
	7,  // 52: rpc.Merlin.SecureDelete:input_type -> rpc.AgentCMD
	7,  // 53: rpc.Merlin.SharpGen:input_type -> rpc.AgentCMD
	7,  // 54: rpc.Merlin.Skew:input_type -> rpc.AgentCMD
	7,  // 55: rpc.Merlin.Sleep:input_type -> rpc.AgentCMD
	7,  // 56: rpc.Merlin.Socks:input_type -> rpc.AgentCMD
	7,  // 57: rpc.Merlin.SSH:input_type -> rpc.AgentCMD
	7,  // 58: rpc.Merlin.Token:input_type -> rpc.AgentCMD
	7,  // 59: rpc.Merlin.Touch:input_type -> rpc.AgentCMD
	7,  // 60: rpc.Merlin.UnlinkAgent:input_type -> rpc.AgentCMD
	7,  // 61: rpc.Merlin.Upload:input_type -> rpc.AgentCMD
	1,  // 62: rpc.Merlin.Uptime:input_type -> rpc.ID
	25, // 63: rpc.Merlin.Groups:input_type -> google.protobuf.Empty
	16, // 64: rpc.Merlin.GroupAdd:input_type -> rpc.Group
	1,  // 65: rpc.Merlin.GroupList:input_type -> rpc.ID
	25, // 66: rpc.Merlin.GroupListAll:input_type -> google.protobuf.Empty
	16, // 67: rpc.Merlin.GroupRemove:input_type -> rpc.Group
	1,  // 68: rpc.Merlin.GetAgent:input_type -> rpc.ID
	25, // 69: rpc.Merlin.GetAgents:input_type -> google.protobuf.Empty
	1,  // 70: rpc.Merlin.GetAgentLinks:input_type -> rpc.ID
	1,  // 71: rpc.Merlin.GetAgentStatus:input_type -> rpc.ID
	25, // 72: rpc.Merlin.GetAgentRows:input_type -> google.protobuf.Empty
	1,  // 73: rpc.Merlin.Remove:input_type -> rpc.ID
	25, // 74: rpc.Merlin.GetAllJobs:input_type -> google.protobuf.Empty
	25, // 75: rpc.Merlin.GetAllActiveJobs:input_type -> google.protobuf.Empty
	1,  // 76: rpc.Merlin.GetAgentJobs:input_type -> rpc.ID
	1,  // 77: rpc.Merlin.GetAgentActiveJobs:input_type -> rpc.ID
	12, // 78: rpc.Merlin.CreateListener:input_type -> rpc.Options
	25, // 79: rpc.Merlin.GetListenerIDs:input_type -> google.protobuf.Empty
	25, // 80: rpc.Merlin.GetListeners:input_type -> google.protobuf.Empty
	1,  // 81: rpc.Merlin.GetListenerOptions:input_type -> rpc.ID
	19, // 82: rpc.Merlin.GetListenerDefaultOptions:input_type -> rpc.String
	25, // 83: rpc.Merlin.GetListenerTypes:input_type -> google.protobuf.Empty
	1,  // 84: rpc.Merlin.GetListenerStatus:input_type -> rpc.ID
	1,  // 85: rpc.Merlin.RemoveListener:input_type -> rpc.ID
	1,  // 86: rpc.Merlin.RestartListener:input_type -> rpc.ID
	7,  // 87: rpc.Merlin.SetListenerOption:input_type -> rpc.AgentCMD
	1,  // 88: rpc.Merlin.StartListener:input_type -> rpc.ID
	1,  // 89: rpc.Merlin.StopListener:input_type -> rpc.ID
	25, // 90: rpc.Merlin.Servers:input_type -> google.protobuf.Empty
	19, // 91: rpc.Merlin.GetModule:input_type -> rpc.String
	25, // 92: rpc.Merlin.GetModuleList:input_type -> google.protobuf.Empty
	22, // 93: rpc.Merlin.RunModule:input_type -> rpc.ModuleRun
	1,  // 94: rpc.Merlin.Reconnect:output_type -> rpc.ID
	1,  // 95: rpc.Merlin.Register:output_type -> rpc.ID
	10, // 96: rpc.Merlin.Listen:output_type -> rpc.Message
	10, // 97: rpc.Merlin.Any:output_type -> rpc.Message
	10, // 98: rpc.Merlin.CD:output_type -> rpc.Message
	10, // 99: rpc.Merlin.CheckIn:output_type -> rpc.Message
	10, // 100: rpc.Merlin.ClearJobs:output_type -> rpc.Message
	10, // 101: rpc.Merlin.ClearJobsCreated:output_type -> rpc.Message
	10, // 102: rpc.Merlin.CMD:output_type -> rpc.Message
	10, // 103: rpc.Merlin.Connect:output_type -> rpc.Message
	10, // 104: rpc.Merlin.Download:output_type -> rpc.Message
	10, // 105: rpc.Merlin.ENV:output_type -> rpc.Message
	10, // 106: rpc.Merlin.ExecuteAssembly:output_type -> rpc.Message
	10, // 107: rpc.Merlin.ExecutePE:output_type -> rpc.Message
	10, // 108: rpc.Merlin.ExecuteShellcode:output_type -> rpc.Message
	10, // 109: rpc.Merlin.Exit:output_type -> rpc.Message
	10, // 110: rpc.Merlin.IFConfig:output_type -> rpc.Message
	10, // 111: rpc.Merlin.InvokeAssembly:output_type -> rpc.Message
	10, // 112: rpc.Merlin.JA3:output_type -> rpc.Message
	10, // 113: rpc.Merlin.KillDate:output_type -> rpc.Message
	10, // 114: rpc.Merlin.KillProcess:output_type -> rpc.Message
	10, // 115: rpc.Merlin.LinkAgent:output_type -> rpc.Message
	10, // 116: rpc.Merlin.ListAssemblies:output_type -> rpc.Message
	10, // 117: rpc.Merlin.Listener:output_type -> rpc.Message
	10, // 118: rpc.Merlin.LoadAssembly:output_type -> rpc.Message
	10, // 119: rpc.Merlin.LoadCLR:output_type -> rpc.Message
	10, // 120: rpc.Merlin.LS:output_type -> rpc.Message
	10, // 121: rpc.Merlin.MaxRetry:output_type -> rpc.Message
	10, // 122: rpc.Merlin.Memory:output_type -> rpc.Message
	10, // 123: rpc.Merlin.MEMFD:output_type -> rpc.Message
	10, // 124: rpc.Merlin.Netstat:output_type -> rpc.Message
	10, // 125: rpc.Merlin.Note:output_type -> rpc.Message
	10, // 126: rpc.Merlin.Nslookup:output_type -> rpc.Message
	10, // 127: rpc.Merlin.Padding:output_type -> rpc.Message
	10, // 128: rpc.Merlin.Parrot:output_type -> rpc.Message
	10, // 129: rpc.Merlin.Pipes:output_type -> rpc.Message
	10, // 130: rpc.Merlin.PS:output_type -> rpc.Message
	10, // 131: rpc.Merlin.PWD:output_type -> rpc.Message
	10, // 132: rpc.Merlin.RM:output_type -> rpc.Message
	10, // 133: rpc.Merlin.RunAs:output_type -> rpc.Message
	10, // 134: rpc.Merlin.SecureDelete:output_type -> rpc.Message
	10, // 135: rpc.Merlin.SharpGen:output_type -> rpc.Message
	10, // 136: rpc.Merlin.Skew:output_type -> rpc.Message
	10, // 137: rpc.Merlin.Sleep:output_type -> rpc.Message
	10, // 138: rpc.Merlin.Socks:output_type -> rpc.Message
	10, // 139: rpc.Merlin.SSH:output_type -> rpc.Message
	10, // 140: rpc.Merlin.Token:output_type -> rpc.Message
	10, // 141: rpc.Merlin.Touch:output_type -> rpc.Message
	10, // 142: rpc.Merlin.UnlinkAgent:output_type -> rpc.Message
	10, // 143: rpc.Merlin.Upload:output_type -> rpc.Message
	10, // 144: rpc.Merlin.Uptime:output_type -> rpc.Message
	15, // 145: rpc.Merlin.Groups:output_type -> rpc.Slice
	10, // 146: rpc.Merlin.GroupAdd:output_type -> rpc.Message
	15, // 147: rpc.Merlin.GroupList:output_type -> rpc.Slice
	18, // 148: rpc.Merlin.GroupListAll:output_type -> rpc.GroupMembers
	10, // 149: rpc.Merlin.GroupRemove:output_type -> rpc.Message
	2,  // 150: rpc.Merlin.GetAgent:output_type -> rpc.AgentInfo
	15, // 151: rpc.Merlin.GetAgents:output_type -> rpc.Slice
	15, // 152: rpc.Merlin.GetAgentLinks:output_type -> rpc.Slice
	10, // 153: rpc.Merlin.GetAgentStatus:output_type -> rpc.Message
	14, // 154: rpc.Merlin.GetAgentRows:output_type -> rpc.TableData
	10, // 155: rpc.Merlin.Remove:output_type -> rpc.Message
	9,  // 156: rpc.Merlin.GetAllJobs:output_type -> rpc.Jobs
	9,  // 157: rpc.Merlin.GetAllActiveJobs:output_type -> rpc.Jobs
	9,  // 158: rpc.Merlin.GetAgentJobs:output_type -> rpc.Jobs
	9,  // 159: rpc.Merlin.GetAgentActiveJobs:output_type -> rpc.Jobs
	10, // 160: rpc.Merlin.CreateListener:output_type -> rpc.Message
	15, // 161: rpc.Merlin.GetListenerIDs:output_type -> rpc.Slice
	14, // 162: rpc.Merlin.GetListeners:output_type -> rpc.TableData
	12, // 163: rpc.Merlin.GetListenerOptions:output_type -> rpc.Options
	12, // 164: rpc.Merlin.GetListenerDefaultOptions:output_type -> rpc.Options
	15, // 165: rpc.Merlin.GetListenerTypes:output_type -> rpc.Slice
	10, // 166: rpc.Merlin.GetListenerStatus:output_type -> rpc.Message
	10, // 167: rpc.Merlin.RemoveListener:output_type -> rpc.Message
	10, // 168: rpc.Merlin.RestartListener:output_type -> rpc.Message
	10, // 169: rpc.Merlin.SetListenerOption:output_type -> rpc.Message
	10, // 170: rpc.Merlin.StartListener:output_type -> rpc.Message
	10, // 171: rpc.Merlin.StopListener:output_type -> rpc.Message
	15, // 172: rpc.Merlin.Servers:output_type -> rpc.Slice
	21, // 173: rpc.Merlin.GetModule:output_type -> rpc.Module
	15, // 174: rpc.Merlin.GetModuleList:output_type -> rpc.Slice
	11, // 175: rpc.Merlin.RunModule:output_type -> rpc.Messages
	94, // [94:176] is the sub-list for method output_type
	12, // [12:94] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { file_pkg_rpc_rpc_proto_init() }
func file_pkg_rpc_rpc_proto_init() {
	if File_pkg_rpc_rpc_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_pkg_rpc_rpc_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_rpc_rpc_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AgentInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_rpc_rpc_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Build); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_rpc_rpc_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Comms); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_rpc_rpc_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Host); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_rpc_rpc_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Process); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_rpc_rpc_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AgentCMD); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_rpc_rpc_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Job); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_rpc_rpc_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Jobs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_rpc_rpc_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Message); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_rpc_rpc_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Messages); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_rpc_rpc_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Options); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_rpc_rpc_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TableRows); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_rpc_rpc_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TableData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_rpc_rpc_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Slice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_rpc_rpc_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Group); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_rpc_rpc_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupMember); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_rpc_rpc_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupMembers); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_rpc_rpc_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*String); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_rpc_rpc_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModuleOption); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_rpc_rpc_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Module); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_rpc_rpc_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModuleRun); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_rpc_rpc_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Login); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_pkg_rpc_rpc_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   24,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_pkg_rpc_rpc_proto_goTypes,
		DependencyIndexes: file_pkg_rpc_rpc_proto_depIdxs,
		EnumInfos:         file_pkg_rpc_rpc_proto_enumTypes,
		MessageInfos:      file_pkg_rpc_rpc_proto_msgTypes,
	}.Build()
	File_pkg_rpc_rpc_proto = out.File
	file_pkg_rpc_rpc_proto_rawDesc = nil
	file_pkg_rpc_rpc_proto_goTypes = nil
	file_pkg_rpc_rpc_proto_depIdxs = nil
}
